#!/bin/bash
#######################################################################################
#
# This script provides you a simple method for monitoring how long it has been since 
# you last backup completed.  You can specify the destination, or it will default to
# "CrashPlan Central"
#
# Copyright (c) 2014 Todd Lehr
#
# Version 1.0.0
#
# Known Problems: This will likely not work with backup sets in Crashplan
#
#######################################################################################

#
# Defaults and environment setup
#
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

PROGNAME=`basename $0`
REVISION="0.1" 

LOG_DIR=/usr/local/crashplan/log
LOG=history.log.0     

DEST_DEFAULT="CrashPlan Central"

PROC_CHECK=no
date2stamp () {
        #
        # $1 = date
        # $2 = time

        hr=$((`echo $2 | cut -c1-2`*3600))
        mn=$((`echo $2 | cut -c4-5`*60))
        PM=0

        idate=`date --date "$1" +%s`
        [ "`echo $2 | cut -c6-7`" == "PM" ] && PM=43200
        echo `echo $idate+$hr+$mn+$PM | bc -l`

}

dateDiff (){
    diffSec=$(($2-$1))
    echo $diffSec
}

OK() {
   echo "OK: "$*
   exit $OK_STATE
}
 
WARN() {
   echo "WARNING: "$*
   exit $WARN_STATE
}

CRIT() {
   echo "CRITICAL: "$*
   exit $CRIT_STATE   
}
 
UNK() {
   echo "UNK: "$*
   exit $UNKNOWN_STATE
}
 
print_usage() {
    echo "Usage: $PROGNAME [ -p ] || [ [ -d destination ] || [ -r destination ] [ -l log directory ] ]"
    echo " "
    echo "-p    : Check to ensure the CrashPlan process is running, if specified all other parameters are ignored"
    echo " "
    echo "-d    : Specify backup destination, defaults to 'CrashPlan Central' if not specified"
    echo "-r    : Check if running backup goes to this destination, defaults to 'CrashPlan Central' if not specified"
    echo "-l    : Specify log direction, defaults to /usr/local/crashplan/log"
    echo " "
    echo "Example:"
    echo "      check_crashplan -d my.secondsite.com - Monitor backup to alternate location"
    echo "      check_crashplan -p - confirm the process is running"
}
 
print_help() {
    print_usage
    exit 0
}
 
while [ "${1}" != "" ] ; do

case "$1" in
    -p )
        PROC_CHECK=yes
        ;;
    -l | --log)
        LOG_DIR=${2}
        shift
        ;;   
    -d | --destination)
        DEST_NODE=`echo ${2} | sed "s/%%/ /g"`
        [ -z "${2}" ] && DEST_NODE=$DEST_DEFAULT
        shift
        ;;   
    -r | --running)
    	DEST_RUNNING=`echo ${2} | sed "s/%%/ /g"`
    	[ -z "${2}" ] && DEST_RUNNING=$DEST_DEFAULT
    	RUNNING_CHECK='yes'
    	shift
    	;;
    --help|-h)
        print_help
        exit 0
        ;;
esac
shift

done

#
# are we just checking to see if the process is running?
#
if [ "$PROC_CHECK" = "yes" ] ; then
   case `ps -ef | grep "\-Dapp=CrashPlanService" | grep -vc grep` in
        0) echo 0 ;;
        1) echo 1 ;;
   esac
   exit 0
fi

#
# check if 
if [ "$RUNNING_CHECK" = "yes" ] ; then
# TODO: prüfen ob vorher überhaupt ein Backup beendet wurde... bzw das funzt alles nicht.
	LAST_START=`cat $LOG_DIR/$LOG | grep -o "Starting backup to [[:alnum:]]*" | tail -1 | awk '{print $4}'`
	[ "$LAST_START" = "$DEST_RUNNING" ] && echo 1 || echo 0
	exit 1
fi

  
###########################################################################
# Backup Completion Check
###########################################################################
 
if [ ! -f $LOG_DIR/$LOG ] ; then
  UNK "check_crashplan couldn't find logfile $LOG_DIR/$LOG"
fi
  
# 
# make sure we even have a completed backup in the first place
#
LAST_LOG=`cat $LOG_DIR/$LOG | grep "Completed backup"  | grep "to $DEST_NODE" | tail -1`

if [ "$LAST_LOG" = "" ] ; then
  UNK "Found no record of any backup to destination $DEST_NODE"
fi
  
# 
# pull last log entry for this destination
#
LAST_LOG_BACK_HALF=`echo $LAST_LOG | awk -F: '{print $3}' | awk -F'[' '{print $1}'`
LAST_DATE=`echo $LAST_LOG | awk -F' ' '{print $2}'`
LAST_TIME=`echo $LAST_LOG | awk -F' ' '{print $3}'`

#
# convert date format
#
LAST_DATE=`echo $LAST_DATE | awk '{printf("20%2s-%2s-%2s",substr($1,7,2),substr($1,1,2),substr($1,4,2))}'`

TS1=`date2stamp $LAST_DATE $LAST_TIME`
TS2=`date --utc +%s`


echo `dateDiff $TS1 $TS2`
